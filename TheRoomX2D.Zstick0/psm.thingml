/* This is the PSM the Platform Specific Model */
/*** This version contains the real gadget platform */

/* This is the first very hard-coded Z-wave version 190105 */

/* This version has possibility to change the polling intervals for temperature */
import "datatypes.thingml" from stl	
import "pim_messages.thingml"
import "psm_datatypes.thingml" 
import "javatimer.thingml" // 160310

// PSM specific messages

thing fragment PSM_Msg {
	message initialize(links:String[25], zstdr:ZStickDriver);
}

// Here we relate to the given jstick library and kick-down to it from ThingML

thing fragment PSMSensor {
	/* required port provide_val {} // TODO This does not work as override
	provided port require_val {} */
}

thing fragment PSMSensorSet includes PSMSensor {
property sensors: Integer
}

thing fragment PSMSensorSingle includes PSMSensorSet {
}


// We need a way to initialize the Z-stick etc
// This defines the central kick-down concept. The maven_dep stuff refers to an installed Maven project
thing ZstickManager includes PSM_Msg, GeneralMsg
@maven_dep "<dependency>
<groupId>OpenHABZStickDriverJava</groupId>
<artifactId>OpenHABZStickDriverJava</artifactId>
<version>0.0.2-SNAPSHOT</version>
</dependency>"
{ 	/* Ports may be defined here */
	required port to_T1 {
		sends initialize
	}
	
	required port to_onoff1 {
		sends initialize
	}

	required port to_gdg {
		sends sensorinfo, deviceinfo
	}
	
	/* properties defined here */
	property UID_ZStick : String = "bef03f83" // this is set in initialize() function as the unique UID part of the Z-wave controller
	property PrefixUrl:String = "http://localhost:8080/rest/items/zwave_device_"
	property Base_Api:String = "http://localhost:8080/rest"
	property SensorTypeUid:String = "zwave:aeon_zw100_01_010"
	property SensorChannelType:String = "zwave:sensor_temperature"
	property ActuatorTypeUid:String = "zwave:fibaro_fgwp102_03_002"
	property ActuatorChannelType:String = "zwave:switch_binary"
	property Zstick: ZStickDriver =`new no.hiof.project1.ZStickDriver()`
	
	/*
	property sensor_list:Sensor[25] // removed at SIMULATION
	property device_list:Device[25] // removed at SIMULATION
	property i:Integer // runner index in list of sensors or devices
	// property s:Sensor // temporary Sensor removed at SIMULATION
	// property d:Device // temporary Device removed at SIMULATION
	property model:String
	property proto:String
	property sid:Integer // sensor id
	property did:Integer // device id
	property dataTypes:Integer
	property temperature:Double
	property humidity:Long
	property timeStamp:Long
	property name:String
	property devicetype:String
	property devicemethods:Long
	property devicelastcmd:String
	property devicelastval:Long
	
	*/

	function observe_sensors() do
		// Now we send to PIM all the Sensor gadgets which are managed by that Zstick
		println("observe_sensors: TBD 190105")
	end
	
	function observe_devices() do
		// Now we send to PIM all the Devices actuators which are managed by that Zstick
		println("observe_devices: TBD 190105")
	end

	function initialize() do
	// kick-down initialization
		//OpenHab API URl
		var sensorLink:String[25]
		`try {`
						sensorLink = ``&Zstick&`.getAllLinkId(`&Base_Api&`, `&SensorTypeUid&`, `&SensorChannelType&`)`
						`} catch (java.io.IOException x) {System.err.println("Caught IOException: " + x.getMessage());}`
		
		var actuatorLink:String[25]
		`try {`
						actuatorLink = ``&Zstick&`.getAllLinkId(`&Base_Api&`, `&ActuatorTypeUid&`, `&ActuatorChannelType&`)`
						`} catch (java.io.IOException x) {System.err.println("Caught IOException: " + x.getMessage());}`
		to_T1!initialize(sensorLink, Zstick)
		to_onoff1!initialize(actuatorLink, Zstick)
		
		observe_sensors()
		observe_devices()
		
		// Now we send to PIM all the Device i.e. actuator gadgets that exist in the system
		
	end //initialize
	
	statechart ZstickBehavior init Init {
		state Init {
		on entry do 
			initialize()
			
		end }
	}
}

thing ThermometerSet includes PSMSensorSet,TemperatureMsg, GeneralMsg, PSM_Msg, TimerClient {
// TimerClient introduced 160310
	required port provide_val {sends temperature, display_thermometer}
//	required port show_values {sends temperature} REMOVED FROM SIMULATION
	provided port require_val {receives add_thermometer, get_thermometer}
	provided port initial {receives initialize}
	
	property zs:String // kick-down z-stick prefix of sensor name (identifier)
	property Zstick: ZStickDriver
	readonly property maxSensor:Integer = 25
	property thermometers:Integer[maxSensor] // Identifiers of the thermometers in the set
	property thermotext:String[maxSensor] // corresponding explanatory text
	property thermolink:String[maxSensor] // link to get thermostat 
	property last_thermo:Integer = 0 // number of thermometers in the set 
	property i:Integer // runner index in list
	property poll_intrvl:Integer = 10000 // polling interval in milliseconds, default is like hardcoded value from X2.sim
	property s:String // runner Sensor name 190105
	property id_s:Integer // temporary id value (to be used with kick-down)
	// 190105 property sensortype:Integer // temporary value for sensor type
	property txt_s:String // temporary for textual temperature
	property temp_s:Double // temporary temperature value
	property found:Boolean // temporary - true when item found in loop
	property TempSensorNode:String = "_node5_sensor_temperature"
	statechart behaviorThermometerSet init Init {
		state Init {
			transition -> Idle
			event temp: initial?initialize
			action do
				thermolink = temp.links
				Zstick = temp.zstdr
				timer!timer_start(poll_intrvl) // starting the polling cycle
			end
		}
		state Idle {
			transition -> Idle
			event timout:timer?timer_timeout // 160310
			action do
				i=0
				while (i<last_thermo)do
					id_s=thermometers[i]
					s= thermolink[i]
					// hardcoded only one thermometer
					if (not (s==`null`)) // TODO find a way in ThingML to check existence?
					do
						`try {`
						txt_s = ``&Zstick& `.getItemState(`&s&`).split(" ",2)[0]`
						`} catch (java.io.IOException x) {System.err.println("Caught IOException: " + x.getMessage());}`
						temp_s= `Double.valueOf(` &txt_s&`)`
						provide_val!temperature(id_s,thermotext[i],temp_s)
						println("Current temperature from sensor " + id_s + ": " + temp_s)
					end
					i=i+1
				end 
				
				timer!timer_start(poll_intrvl) // restarting the polling cycle
			end
			transition -> Idle
			event addt:require_val?add_thermometer
			action do				
				id_s=addt.id
				thermometers[last_thermo] = id_s
				thermotext[last_thermo]= addt.txt
				last_thermo = last_thermo+1
			end
			
			transition -> Idle
			event get_temp:require_val?get_thermometer
			action do
				id_s = get_temp.id
				i=0
				found = false
				while (i<last_thermo and (not found)) do
					if (id_s==thermometers[i]) do
						found=true // trick to terminate while loop
					end
					i=i+1
				end
				if (found)
				do
					s= thermolink[i-1]
					// hardcoded only one thermometer
					if (not (s==`null`)) // TODO find a way in ThingML to check existence?
					do
						`try {`
						txt_s = ``&Zstick& `.getItemState(`&s&`).split(" ",2)[0]`
						`} catch (java.io.IOException x) {System.err.println("Caught IOException: " + x.getMessage());}`
						temp_s= `Double.valueOf(` &txt_s&`)`			
						provide_val!display_thermometer(id_s,thermotext[i-1],temp_s)
					end
					i=i+1
				end
				timer!timer_start(poll_intrvl) // restarting the polling cycle
			end
		}
		
		
	}
} // ThermometerSet



thing OnOffSet includes PSM_Msg, GeneralMsg, OnOffMsg{
	provided port require_val {receives SwitchOn, SwitchOff, add_device}
	provided port initial {receives initialize}
//	required port show_val {sends SwitchOn, SwitchOff} REMOVED FROM SIMULATION
	
	property zs:String // kick-down 
	property Zstick: ZStickDriver
	
	readonly property maxSwitches:Integer = 25
	property onoffswitches:Integer[maxSwitches] // Identifiers of the onoffswitches in the set
	property onoffLink:String[maxSwitches] // Identifiers of the onoffswitches in the set
	property last_onoff:Integer = 0 // number of onoff switches in the set 
		
	property i:Integer // runner index in list
	property did:Integer // temporary device id
	property d:String // temporary device 
	// 190105 property mth:Long // temporary methods
	property found:Boolean // temporary boolean used in while loop
	property status:Long // of either ON or OFF not very reliable since no real result is returned
	property PowerPlugNode:String = "_node6_switch_binary"
	statechart behaviorOnOffSet init Init {
		state Init {
			transition -> Idle
			event initial: initial?initialize
			action do
				onoffLink = initial.links
				Zstick = initial.zstdr				
			end
		}
		state Idle {
			transition -> Idle
			event add_dev: require_val?add_device
			action do
				did=add_dev.did
				
				onoffswitches[last_onoff]=did
				last_onoff = last_onoff+1
			end
			transition -> Idle
			event swon: require_val?SwitchOn
			action do
				did=swon.did
				i=0
				found = false
				while (i<last_onoff and (not found)) do
					if (did==onoffswitches[i]) do
						found=true // trick to terminate while loop
					end
					i=i+1
				end
				if (found) do
					d= onoffLink[i-1]
					
					`try {`
						if (not (d==`null`)) do
							``&Zstick&`.setItemState((`&d&`), "ON");`
							println("Turning ON")	
						end
					`} catch (java.io.IOException x) {System.err.println("Caught IOException: " + x.getMessage());}`
				end
			end
			transition -> Idle
			event swoff: require_val?SwitchOff
			action do
				did=swoff.did
				i=0
				found = false
				while (i<last_onoff and (not found)) do
					if (did==onoffswitches[i]) do
						found=true // trick to terminate while loop
					end
					i=i+1
				end
				if (found) do
					d= onoffLink[i-1]
					
					`try {`
						if (not (d==`null`)) do
							``&Zstick&`.setItemState((`&d&`), "OFF");`
							println("Turning OFF")	
						end
					`} catch (java.io.IOException x) {System.err.println("Caught IOException: " + x.getMessage());}`
				end
			end
		}
	}
}

//SIMULATION


thing GadgetSim includes GeneralMsg
@mock "true"
{	provided port show_gadgets {
		receives sensorinfo, deviceinfo
	}
}


