/* ThingML Framework */

// Base datatypes
import "datatypes.thingml" from stl

// Import everything in core [where is core?]
// import "core/scheduler.thingml"
// import "core/timer.thingml"

/* PSM must be included */
import "psm.thingml"
import "psm_datatypes_sim.thingml"
import "pim_messages.thingml"
import "timer.thingml"

thing PIM includes GeneralMsg, TemperatureMsg, OnOffMsg {
	provided port get_sensor {
		receives temperature, display_thermometer
	}
	required port request_sensor {
		sends add_thermometer, set_polling_interval, get_thermometer
	}
	required port request_actuator{
		sends add_device, SwitchOn, SwitchOff
	}
	provided port human_input {
		receives add_thermometer, get_thermometer, add_device, SwitchOn, SwitchOff, set_temperature, set_temp_deviation, set_polling_interval
	}
	required port human_output {
		sends temperature, prompt, display_thermometer
	}
	
	property tmrature:Double = 20 // the requested temperature for the room
	property delta: Double = 1 // set default temperature deviation = 1
	property thermo_id:Integer // the single thermometer identifier
	property switch_id:Integer // the single on-off switch identifier
	property last_switch_state: Integer = -1
	
	function turnOn(did : Integer) do
		request_actuator!SwitchOn(did)
		last_switch_state = 1
	end
	
	function turnOff(did : Integer) do
		request_actuator!SwitchOff(did)
		last_switch_state = 0
	end
	
	statechart PIM_behavior init Build {
		composite state Build init AddThermo keeps history {
			state AddThermo {
				transition -> AddDevice
				event addt:human_input?add_thermometer
				action do
					thermo_id=addt.id
					request_sensor!add_thermometer(thermo_id,addt.txt)
					human_output!prompt("Please add one switch device") // SIMULATION: prompting on console for the user to react properly
				end
				transition -> AddThermo // Cover other messages
				event human_input?add_device
				action do
					human_output!prompt("Please add thermometer")
				end
				transition -> AddThermo // Cover other messages
				event human_input?SwitchOn
				action do
					human_output!prompt("Please add thermometer")
				end
				transition -> AddThermo // Cover other messages
				event human_input?SwitchOff
				action do
					human_output!prompt("Please add thermometer")
				end
				transition -> AddThermo // Cover other messages
				event human_input?set_temperature
				action do
					human_output!prompt("Please add thermometer")
				end
				transition -> AddThermo // Cover other messages
				event human_input?set_temp_deviation
				action do
					human_output!prompt("Please add thermometer")
				end
				transition -> AddThermo // Cover other messages
				event human_input?set_polling_interval
				action do
					human_output!prompt("Please add thermometer")
				end
				transition -> AddThermo
				event human_input?get_thermometer
				action do
					human_output!prompt("Please add thermometer")
				end
				// temperature is handled on Build level
			}
			state AddDevice {
				transition -> SetThermostat
				event adddev:human_input?add_device
				action do
					switch_id=adddev.did
					request_actuator!add_device(switch_id)
					human_output!prompt("Please give thermostat temperature setting") // SIMULATION: prompting on console for the user to react properly
				end
				
				transition -> AddDevice
				event human_input?SwitchOn
				action do
					human_output!prompt("Please add device")
				end
				transition -> AddDevice
				event human_input?SwitchOff
				action do
					human_output!prompt("Please add device")
				end
				transition -> AddDevice
				event human_input?set_polling_interval
				action do
					human_output!prompt("Please add device")
				end
				transition -> AddDevice
				event human_input?add_thermometer
				action do
					human_output!prompt("Thermometer already added, add device")
				end
				transition -> AddDevice
				event human_input?set_temperature
				action do
					human_output!prompt("Please add device")
				end
				transition -> AddDevice
				event human_input?set_temp_deviation
				action do
					human_output!prompt("Please add device")
				end
				// temperature and set_temperature handled on Build level
			}
			state SetThermostat {
				// Here the only message we want is the set_temperature, but this is on one level up to move to Running
				transition -> SetThermostat
				event human_input?add_thermometer
				action do
					human_output!prompt("Please set temperature for Thermostat")
				end			
				transition -> SetThermostat
				event human_input?add_device
				action do
					human_output!prompt("Please set temperature for Thermostat")
				end			
				transition -> SetThermostat
				event human_input?SwitchOn
				action do
					human_output!prompt("Please set temperature for Thermostat")
				end			
				transition -> SetThermostat
				event human_input?SwitchOff
				action do
					human_output!prompt("Please set temperature for Thermostat")
				end			
				transition -> SetThermostat
				event human_input?set_polling_interval
				action do
					human_output!prompt("Please set temperature for Thermostat")
				end			
			}
			
			// Normal transition to the Running state
			transition -> Running
			event set_temp:human_input?set_temperature
			action do
				tmrature = set_temp.t
				human_output!prompt("Now entering thermostat. Please give temperature observations") // SIMULATION: prompting on console for the user to react properly
			end
			
			transition -> Running
			event set_deviation:human_input?set_temp_deviation
			action do
				delta = set_deviation.d
				human_output!prompt("Now entering thermostat. Please give temperature observations") // SIMULATION: prompting on console for the user to react properly
			end
			
			//Escape situations
			transition -> Build
			event get_sensor?temperature 
				// just discard, the thermostat is not running, yet (161103)
				
			transition -> Build
			event get_temp:human_input?get_thermometer
			action do
				request_sensor!get_thermometer(get_temp.id)
			end
			
			transition -> Build
			event disp_temp:get_sensor?display_thermometer
			action do
				human_output!display_thermometer(disp_temp.id, disp_temp.txt, disp_temp.t)
			end
		} // end Build
		
		composite state Running init Thermostat keeps history {
		
		
			composite state Thermostat init TemprDecide {  // notice that we are not keeping history, we do not know whether to turn on or off
				state TemprDecide {
					transition -> TemprDecrease
					event temp2:get_sensor?temperature
					guard temp2.t>=tmrature+delta and last_switch_state != 0  // We choose switch OFF as much as we can here
					action do
						turnOff(switch_id)
					end
					
					transition -> TemprIncrease
					event temp2:get_sensor?temperature
					guard temp2.t<tmrature-delta and last_switch_state != 1
					action do
						turnOn(switch_id)
					end
					transition -> TemprDecrease
					event temp2:get_sensor?temperature
					guard temp2.t>=tmrature+delta and last_switch_state == 0 // We choose switch OFF as much as we can here
					action do
						//Do not need to turn switch off again
					end
					
					transition -> TemprIncrease
					event temp2:get_sensor?temperature
					guard temp2.t<tmrature-delta and last_switch_state == 1 
					action do
						//Do not need to turn switch on again
					end
				}
				
				state TemprIncrease{ // Invariant: Switch is ON and temperature should increase
				
					transition -> TemprIncrease 
					event temp:get_sensor?temperature
					guard temp.t<tmrature+delta // it should keep increasing until well above the desired temperature
					action do
						// TRACING to follow thermostat print("TempIncrease: Observed=") print(temp.t) print(" Desired ") print(tmrature) print("\n") 
					end
					
					transition -> TemprDecrease
					event temp2:get_sensor?temperature
					guard temp2.t>=tmrature+delta 
					action do
						turnOff(switch_id)
					end
				}

				state TemprDecrease{ // Invariant: Switch is OFF and temperature should decrease
				
					transition-> TemprDecrease
					event temp:get_sensor?temperature
					guard temp.t>=tmrature-delta // it should keep decreasing until well below the desired temperature
					action do
						// TRACING to follow thermostat print("TempDecrease: Observed=") print(temp.t) print(" Desired ") print(tmrature) print("\n") 
					end
					
					transition -> TemprIncrease
					event temp2:get_sensor?temperature
					guard temp2.t<tmrature-delta
					action do
						turnOn(switch_id)
					end
				}

				transition -> On
				event swon:human_input?SwitchOn
				action do
					turnOn(swon.did)
				end 
				transition -> Off
				event swoff:human_input?SwitchOff
				action do
					turnOff(swoff.did)
				end 
				transition -> Thermostat
				event set_temp:human_input?set_temperature
				action do
					tmrature = set_temp.t
				end
				transition -> Thermostat
				event set_deviation:human_input?set_temp_deviation
				action do
					delta = set_deviation.d
				end
			} // end Thermostat
			
			state On {
				transition -> Off
				event swoff:human_input?SwitchOff
				action do
					turnOff(swoff.did)
				end 
				transition -> On
				event swon:human_input?SwitchOn
				action do
					turnOn(swon.did)
				end
				transition -> Thermostat
				event set_temp:human_input?set_temperature
				action do
					tmrature = set_temp.t
				end
				transition -> Thermostat
				event set_deviation:human_input?set_temp_deviation
				action do
					delta = set_deviation.d
				end
			}
			state Off {
				transition -> Off
				event swoff:human_input?SwitchOff
				action do
					turnOff(swoff.did)
				end 
				transition -> On
				event swon:human_input?SwitchOn
				action do
					turnOn(swon.did)
				end
				transition -> Thermostat
				event set_temp:human_input?set_temperature
				action do
					tmrature = set_temp.t
				end
				transition -> Thermostat
				event set_deviation:human_input?set_temp_deviation
				action do
					delta = set_deviation.d
				end	
			}
			
			transition -> Running
			event get_temp:human_input?get_thermometer
			action do
				request_sensor!get_thermometer(get_temp.id)
			end
			
			transition -> Running
			event disp_temp:get_sensor?display_thermometer
			action do
				human_output!display_thermometer(disp_temp.id, disp_temp.txt, disp_temp.t)
			end
			
			// Transitions of the composite state Running
			transition -> Running
			event pollint:human_input?set_polling_interval
			action do
				// just forward the polling interval instructions to the PSM
				request_sensor!set_polling_interval(pollint.intrvl)
			end
			transition -> Running
			event temp:get_sensor?temperature
				// just discard - this should only happen when in On or Off states
			
			// Messages that should not occur, but may occur
			transition -> Running
			event human_input?add_thermometer
			action do
				human_output!prompt("Adding thermometers has been done and then blocked")
			end	
			transition -> Running
			event human_input?add_device
			action do
				human_output!prompt("Adding devices has been done and then blocked")
			end	
			// Messages the cannot occur - since they are always handled
			transition -> Running
			event human_input?SwitchOn
			action do
				human_output!prompt("INTERNAL ERROR: Impossible SwitchOn at PIM.Running")
			end		
			transition -> Running
			event human_input?SwitchOff
			action do
				human_output!prompt("INTERNAL ERROR: Impossible SwitchOff at PIM.Running")
			end		
			transition -> Running
			event human_input?set_temperature
			action do
				human_output!prompt("INTERNAL ERROR: Impossible set_temperature at PIM.Running")
			end
			transition -> Running
			event human_input?set_temp_deviation
			action do
				human_output!prompt("INTERNAL ERROR: Impossible set_temp_deviation at PIM.Running")
			end
		} // end Running
	} // end PIM_behavior
} // end PIM thing

