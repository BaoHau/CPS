import "datatypes.thingml" from stl
import "pim_messages.thingml"

protocol MQTT @serializer "JSON"
  @mqtt_broker_address "cps2020.westeurope.azurecontainer.io" 
  @mqtt_publish_topic "CPS2020/thingml"
  @mqtt_subscribe_topic "CPS2020/thingmlOut";
  
thing PIM includes TemperatureMsg , OnOffMsg, DeviceGeneral{
	required port MQTT{
		receives  display_thermometer,set_temperature,set_temp_deviation,SwitchOn, SwitchOff,add_thermometer, add_device
		sends SwitchOn_Control, SwitchOff_Control 	
	}
	
	property tmrature:Double = 20 // the requested temperature for the room
	property delta: Double = 1 // set default temperature deviation = 1
	property thermo_id:Integer // the single thermometer identifier
	property switch_id:Integer // the single on-off switch identifier
	property last_switch_state: Integer = -1
	
	function turnOn(did : Integer) do
		println("Controller turn switch on")
		last_switch_state = 1
		MQTT!SwitchOn_Control(did)
	end
	
	function turnOff(did : Integer) do
		println("Controller turn switch off")
		last_switch_state = 0
		MQTT!SwitchOff_Control(did)
	end
	
	statechart PIM_behavior init WaitingForBuild {
		state WaitingForBuild{
			transition -> WaitingForBuild
			event addt:MQTT?add_thermometer
			action do
				thermo_id = addt.id
			end
			
			transition -> WaitingForBuild
			event adddev:MQTT?add_device
			action do
				switch_id = adddev.did
			end
			
			transition -> Thermostat
			event set_temp:MQTT?set_temperature
			action do
				tmrature = set_temp.t
				println("Enter running state with comfort temp: " + tmrature + " and temp deviation: " + delta)
			end
			
			transition -> Thermostat
			event set_deviation:MQTT?set_temp_deviation
			action do
				delta = set_deviation.d
				println("Enter running state with comfort temp: " + tmrature + " and temp deviation: " + delta)
			end
		}
		
		composite state Thermostat init TemprDecide {  // notice that we are not keeping history, we do not know whether to turn on or off
				
				state TemprDecide {
					transition -> TemprDecrease
					event temp2:MQTT?display_thermometer
					guard temp2.t>=tmrature+delta and last_switch_state != 0  // We choose switch OFF as much as we can here
					action do
						turnOff(switch_id)
					end
					
					transition -> TemprIncrease
					event temp2:MQTT?display_thermometer
					guard temp2.t<tmrature-delta and last_switch_state != 1
					action do
						turnOn(switch_id)
					end
					transition -> TemprDecrease
					event temp2:MQTT?display_thermometer
					guard temp2.t>=tmrature+delta and last_switch_state == 0 // We choose switch OFF as much as we can here
					action do
						//Do not need to turn switch off again
					end
					
					transition -> TemprIncrease
					event temp2:MQTT?display_thermometer
					guard temp2.t<tmrature-delta and last_switch_state == 1 
					action do
						//Do not need to turn switch on again
					end
				}
				
				state TemprIncrease{ // Invariant: Switch is ON and temperature should increase
				
					transition -> TemprIncrease 
					event temp:MQTT?display_thermometer
					guard temp.t<tmrature+delta // it should keep increasing until well above the desired temperature
					action do
						// TRACING to follow thermostat print("TempIncrease: Observed=") print(temp.t) print(" Desired ") print(tmrature) print("\n") 
					end
					
					transition -> TemprDecrease
					event temp2:MQTT?display_thermometer
					guard temp2.t>=tmrature+delta 
					action do
						turnOff(switch_id)
					end
				}

				state TemprDecrease{ // Invariant: Switch is OFF and temperature should decrease
				
					transition-> TemprDecrease
					event temp:MQTT?display_thermometer
					guard temp.t>=tmrature-delta // it should keep decreasing until well below the desired temperature
					action do
						// TRACING to follow thermostat print("TempDecrease: Observed=") print(temp.t) print(" Desired ") print(tmrature) print("\n") 
					end
					
					transition -> TemprIncrease
					event temp2:MQTT?display_thermometer
					guard temp2.t<tmrature-delta
					action do
						turnOn(switch_id)
					end
				}

				transition -> Manual
				event swon:MQTT?SwitchOn
				action do
					last_switch_state = 1
				end
				
				transition -> Manual
				event swon:MQTT?SwitchOff
				action do
					last_switch_state = 0
				end
				
				transition -> Thermostat
				event set_temp:MQTT?set_temperature
				action do
					tmrature = set_temp.t
					println("Enter running state with comfort temp: " + tmrature + " and temp deviation: " + delta)
				end
				
				transition -> Thermostat
				event set_deviation:MQTT?set_temp_deviation
				action do
					delta = set_deviation.d
					println("Enter running state with comfort temp: " + tmrature + " and temp deviation: " + delta)
				end
			} // end Thermostat
			
		state Manual{
			transition -> Manual
			event MQTT?SwitchOn
			action do
				last_switch_state = 1
			end
			
			transition -> Manual
			event MQTT?SwitchOff
			action do
				last_switch_state = 0
			end
			
			transition -> Thermostat
			event set_temp:MQTT?set_temperature
			action do
				tmrature = set_temp.t
			end
			transition -> Thermostat
			event set_deviation:MQTT?set_temp_deviation
			action do
				delta = set_deviation.d
			end	
		}
	}
}
